branches:
  only:
    - master

environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"

  matrix:

    # Enable to allow windows PyInstaller dist
    # - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    #   PYTHON: "C:\\Python36-x64"
    #   PYTHON_VERSION: "3.6.x"
    #   PYTHON_ARCH: "64"
      
    # Ubuntu - python 3
    - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
      PYTHON: "3.6"
stack: python %PYTHON%

matrix:
  fast_finish: true

install:
  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - cmd: "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - cmd: "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - cmd: "python -m pip install --disable-pip-version-check --user --upgrade pip==9.0.3"
  #- sh: "sudo apt-get --yes install python3-dev python-dev build-essential libssl-dev libffi-dev"
  - "python -m pip install pyinstaller"

  # Set up the project in develop mode. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "python -m pip install -r requirements.txt"
  - sh: "python -m pip install aws-sam-cli awscli"

build_script:
  # Build the compiled extension
  # TODO: Fix issue with Ubuntu setup
  - cmd: "%CMD_IN_ENV% python setup.py build"
  - cmd: pyinstaller run.py -n book-tracker --onedir --clean

after_test:
  # Pack the artifacts 
  - sh: "sam build"
  # Upload to S3 bucket, save the template file to be used below
  - sh: "sam package --output-template-file serverless-output.yaml --s3-bucket diotsoumas-book-tracker"
  # Upload the stack with the new artifact
  - sh: "aws cloudformation deploy --template-file ./serverless-output.yaml --stack-name book-tracker --capabilities CAPABILITY_IAM"
artifacts:
  - path : dist
    name : "book-tracker"
